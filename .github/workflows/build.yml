name: build

on:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:
    branches: [ main, dotnet-vnext ]
  workflow_dispatch:

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
  NUGET_XMLDOC_MODE: skip
  TERM: xterm

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        include:
          - os: macos-latest
            os_name: macos
          - os: ubuntu-latest
            os_name: linux
          - os: windows-latest
            os_name: windows

    steps:

    - name: Checkout code
      uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v3.2.0

    - name: Build, Test and Package
      shell: pwsh
      run: ./build.ps1

    - uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3.1.4
      name: Upload coverage to Codecov
      with:
        file: ./artifacts/coverage/coverage.net7.0.cobertura.xml
        flags: ${{ matrix.os_name }}

    - name: Publish artifacts
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
      with:
        name: artifacts-${{ matrix.os_name }}
        path: ./artifacts

    - name: Publish NuGet packages
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
      with:
        name: packages-${{ matrix.os_name }}
        path: ./artifacts/packages
        if-no-files-found: error

  validate-packages:
    needs: build
    runs-on: windows-latest
    steps:

    - name: Download packages
      uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
      with:
        name: packages-windows

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v3.2.0

    - name: Validate NuGet packages
      shell: pwsh
      run: |
        dotnet tool install --global dotnet-validate --version 0.0.1-preview.304
        $packages = Get-ChildItem -Filter "*.nupkg" | ForEach-Object { $_.FullName }
        $invalidPackages = 0
        foreach ($package in $packages) {
          dotnet validate package local $package
          if ($LASTEXITCODE -ne 0) {
            $invalidPackages++
          }
        }
        if ($invalidPackages -gt 0) {
          Write-Output "::error::$invalidPackages NuGet package(s) failed validation."
        }

    - name: Checkout vcsjones/AuthenticodeLint
      uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      with:
        path: AuthenticodeLint
        ref: ccfaec53ee5c1b14f029cb8156e0653c530f8b65
        repository: vcsjones/AuthenticodeLint

    - name: Build AuthenticodeLint and validate NuGet package contents
      shell: pwsh
      run: |
        $authlintSource = Join-Path "." "AuthenticodeLint"
        $authLintProject = Join-Path $authlintSource "AuthenticodeLint" "AuthenticodeLint.csproj"
        $artifacts = Join-Path $authlintSource "artifacts"
        $authlint = Join-Path $artifacts "authlint.exe"

        dotnet publish $authLintProject --configuration Release --output $artifacts --runtime win-x64 --self-contained false /p:NoWarn=CS8604

        if ($LASTEXITCODE -ne 0) {
          throw "Failed to publish AuthenticodeLint."
        }

        $packages = Get-ChildItem -Filter "*.nupkg" | ForEach-Object { $_.FullName }
        $invalidPackages = 0
        foreach ($package in $packages) {
          $packageName = Split-Path $package -Leaf
          $extractedNupkg = Join-Path "." "extracted" $packageName
          Expand-Archive -Path $package -DestinationPath $extractedNupkg -Force

          $dlls = Get-ChildItem -Path $extractedNupkg -Filter "*.dll" -Recurse | ForEach-Object { $_.FullName }

          $invalidDlls = 0
          foreach ($dll in $dlls) {
            $authlintProcess = Start-Process -FilePath $authlint -ArgumentList @("-in", $dll, "-verbose") -PassThru
            $authlintProcess.WaitForExit()

            if ($authlintProcess.ExitCode -ne 0) {
              Write-Output "::warning::$dll in NuGet package $package failed signature validation."
              $invalidDlls++
            }
          }

          if ($invalidDlls -gt 0) {
            $invalidPackages++
          }
        }
        if ($invalidPackages -gt 0) {
          Write-Output "::error::$invalidPackages NuGet package(s) failed signature validation."
        }

  publish-myget:
    needs: validate-packages
    runs-on: ubuntu-latest
    if: |
      github.event.repository.fork == false &&
      (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) ||
       startsWith(github.ref, 'refs/tags/v'))
    steps:

    - name: Download packages
      uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
      with:
        name: packages-windows

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v3.2.0

    - name: Push NuGet packages to MyGet
      run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.MYGET_TOKEN }} --skip-duplicate --source https://www.myget.org/F/martincostello/api/v2/package

  publish-nuget:
    needs: validate-packages
    runs-on: ubuntu-latest
    if: |
      github.event.repository.fork == false &&
      startsWith(github.ref, 'refs/tags/v')
    steps:

    - name: Download packages
      uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
      with:
        name: packages-windows

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v3.2.0

    - name: Push NuGet packages to NuGet.org
      run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.NUGET_TOKEN }} --skip-duplicate --source https://api.nuget.org/v3/index.json
