name: build

on:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:
    branches:
      - main
      - dotnet-vnext
      - dotnet-nightly
  workflow_dispatch:

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
  FORCE_COLOR: 3
  NUGET_XMLDOC_MODE: skip
  TERM: xterm

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.os-name }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 20

    outputs:
      dotnet-sdk-version: ${{ steps.setup-dotnet.outputs.dotnet-version }}
      dotnet-validate-version: ${{ steps.get-dotnet-validate-version.outputs.dotnet-validate-version }}
      package-names: ${{ steps.build.outputs.package-names }}
      package-version: ${{ steps.build.outputs.package-version }}

    permissions:
      attestations: write
      contents: write
      id-token: write

    strategy:
      fail-fast: false
      matrix: 
        include:
          - os-name: macos
            runner: macos-latest
          - os-name: linux
            runner: ubuntu-latest
          - os-name: windows
            runner: windows-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        filter: 'tree:0'
        show-progress: false

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3951f0dfe7a07e2313ec93c75700083e2005cbab # v4.3.0
      id: setup-dotnet

    - name: Build, Test and Package
      id: build
      shell: pwsh
      run: ./build.ps1

    - uses: codecov/codecov-action@13ce06bfc6bbe3ecf90edbbf1bc32fe5978ca1d3 # v5.3.1
      name: Upload coverage to Codecov
      with:
        flags: ${{ matrix.os-name }}
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Generate SBOM
      uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # v0.18.0
      with:
        artifact-name: build-${{ matrix.os-name }}.spdx.json
        output-file: ./artifacts/build.spdx.json
        path: ./artifacts/bin
        upload-release-assets: ${{ runner.os == 'Windows' }}

    - name: Attest artifacts
      uses: actions/attest-build-provenance@520d128f165991a6c774bcb264f323e3d70747f4 # v2.2.0
      if: |
        runner.os == 'Windows' &&
        github.event.repository.fork == false &&
        (github.ref_name == github.event.repository.default_branch || startsWith(github.ref, 'refs/tags/v'))
      with:
        subject-path: |
          ./artifacts/bin/MartinCostello.Logging.XUnit/release*/*.dll
          ./artifacts/package/release/*

    - name: Publish artifacts
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
      with:
        name: artifacts-${{ matrix.os-name }}
        path: ./artifacts

    - name: Publish NuGet packages
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
      with:
        name: packages-${{ matrix.os-name }}
        path: ./artifacts/package/release
        if-no-files-found: error

    - name: Get dotnet-validate version
      id: get-dotnet-validate-version
      shell: pwsh
      run: |
        $dotnetValidateVersion = (Get-Content "./.config/dotnet-tools.json" | Out-String | ConvertFrom-Json).tools.'dotnet-validate'.version
        "dotnet-validate-version=${dotnetValidateVersion}" >> $env:GITHUB_OUTPUT

  validate-packages:
    needs: build
    runs-on: ubuntu-latest
    steps:

    - name: Download packages
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        name: packages-windows

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3951f0dfe7a07e2313ec93c75700083e2005cbab # v4.3.0
      with:
        dotnet-version: ${{ needs.build.outputs.dotnet-sdk-version }}

    - name: Validate NuGet packages
      shell: pwsh
      env:
        DOTNET_VALIDATE_VERSION: ${{ needs.build.outputs.dotnet-validate-version }}
      run: |
        dotnet tool install --global dotnet-validate --version ${env:DOTNET_VALIDATE_VERSION} --allow-roll-forward
        $packages = Get-ChildItem -Filter "*.nupkg" | ForEach-Object { $_.FullName }
        $invalidPackages = 0
        foreach ($package in $packages) {
          dotnet validate package local $package
          if ($LASTEXITCODE -ne 0) {
            $invalidPackages++
          }
        }
        if ($invalidPackages -gt 0) {
          Write-Output "::error::$invalidPackages NuGet package(s) failed validation."
          exit 1
        }

  publish-feedz-io:
    needs: [ build, validate-packages ]
    runs-on: ubuntu-latest
    if: |
      github.event.repository.fork == false &&
      (github.ref_name == github.event.repository.default_branch ||
       startsWith(github.ref, 'refs/tags/v'))

    environment:
      name: feedz.io
      url: https://feedz.io/org/${{ github.repository_owner }}/repository/xunit-logging/packages/MartinCostello.Logging.XUnit

    steps:

    - name: Download packages
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        name: packages-windows

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3951f0dfe7a07e2313ec93c75700083e2005cbab # v4.3.0
      with:
        dotnet-version: ${{ needs.build.outputs.dotnet-sdk-version }}

    - name: Push NuGet packages to feedz.io
      shell: bash
      env:
        API_KEY: ${{ secrets.FEEDZ_IO_TOKEN }}
        SOURCE: "https://f.feedz.io/${{ github.repository }}/nuget/index.json"
      run: dotnet nuget push "*.nupkg" --api-key "${API_KEY}" --skip-duplicate --source "${SOURCE}"

  publish-nuget:
    needs: [ build, validate-packages ]
    runs-on: ubuntu-latest
    if: |
      github.event.repository.fork == false &&
      startsWith(github.ref, 'refs/tags/v')

    environment:
      name: NuGet.org
      url: https://www.nuget.org/packages/MartinCostello.Logging.XUnit

    steps:

    - name: Download packages
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        name: packages-windows

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3951f0dfe7a07e2313ec93c75700083e2005cbab # v4.3.0
      with:
        dotnet-version: ${{ needs.build.outputs.dotnet-sdk-version }}

    - name: Push NuGet packages to NuGet.org
      shell: bash
      env:
        API_KEY: ${{ secrets.NUGET_TOKEN }}
        SOURCE: https://api.nuget.org/v3/index.json
      run: dotnet nuget push "*.nupkg" --api-key "${API_KEY}" --skip-duplicate --source "${SOURCE}"

    - name: Publish nuget_packages_published
      uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 # v3.0.0
      with:
        event-type: nuget_packages_published
        repository: ${{ github.repository_owner }}/github-automation
        token: ${{ secrets.COSTELLOBOT_TOKEN }}
        client-payload: |-
          {
            "repository": "${{ github.repository }}",
            "packages": "${{ needs.build.outputs.package-names }}",
            "version": "${{ needs.build.outputs.package-version }}"
          }
